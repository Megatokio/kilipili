;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; =====================================================
; this is the original pio program which ran at ~ 22058 Hz on the 48MHz FPGA.
; it had an effective resolution of 11 bit. (7+log2(16))

;	.program pwm_one_bit_dither
;	.side_set 1 opt
;	; Format:
;	; | high len | low len | (dither) * n |
;	; OSR level
;	; cycle length = 7 + 2 + 127
;	
;	; 136 clocks/cycle frequency 352941 / 16 = 22058
;	delay:
;	  nop [2]
;	.wrap_target
;	  out pins, 1
;	loops:
;	  mov x, isr        side 1
;	loop1:
;	  jmp x-- loop1
;	  mov x, y          side 0
;	loop0:
;	  jmp x-- loop0
;	  jmp !osre delay
;	public entry_point:
;	  pull
;	  out isr, 7
;	  out y, 7
;	.wrap


; =====================================================
; modified program to run on the RP2040 which runs at a higher clock speed.
; it has an effective resolution of 12 bit. (8+log2(16))
;
; the major benefit from the "dithering" is that we get 15 pwm pulses per sample 
; which results in a much higher, easier to filter frequency for the pwm noise.
;
; we need only 15 pulses, not 16, because dithering adds 0 to 15 clock cycles 
; thus we also need at most 15 pulses which we can enlarge.
;
; the sample rate depends on the system clock:
; to avoid audible artifacts, only an integer clock divider can be used, no fractional part.
; to avoid audible artifacts, all pwm pulses must be same width.
; => sample frequency = 264*15 = 3960 clocks per sample 
;
; 100 MHz / 3960  = 25252 Hz
; 125 MHz / 3960  = 31565 Hz
; 44100 Hz * 3960 = 174.64 MHz
; 48000 Hz = 3960 = 190.08 MHz
; 290 MHz / 3960  = 73232 Hz  --> we could divide by 2 

; Data Format:
; | high_len[8] | low_len[8] | dither[15] |
; 
; requirement: high_len + low_len = 255 
; => cycle length = 9 + 255 = 264 clocks/cycle
; =>  264 * 15 = 3960 clocks per sample 

.program pwm_audio
.side_set 1 opt
delay:
	nop [2]
.wrap_target
	out  pins, 1			; dither bit
	mov  x, isr     side 1	; TODO: isn't this 1 cc early?!?
l1:	jmp  x-- l1
	mov  x, y		side 0
l0:	jmp  x-- l0
	jmp  !osre delay
public entry_point:
	pull
	out  isr, 8
	out  y, 8
.wrap




















