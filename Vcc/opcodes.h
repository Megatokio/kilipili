// Copyright (c) 2020 - 2023 kio@little-bat.de
// BSD-2-Clause license
// https://opensource.org/licenses/BSD-2-Clause


#ifndef M
  #define M(E, N) E
  #include <stdint.h>
enum Opcode : uint16_t
#endif
{
	M(NOP, NOARG),
	M(PUSH_TOP, NOARG),
	M(POP_TOP, NOARG),

	M(PUSH0, NOARG),
	M(PUSH0x2, NOARG),
	M(PUSH0x3, NOARG),
	M(PUSH0x4, NOARG),

	M(IVALi16_nopush, ARGi16),
	M(IVALi16, ARGi16),

	M(GVAR_nopush, ARGu16),
	M(GGET_nopush, ARGu16),
	M(GSET, ARGu16),
	M(GVAR, ARGu16),
	M(GGET, ARGu16),

	M(LVAR_nopush, ARGu16),
	M(LGET_nopush, ARGu16),
	M(LSET, ARGu16),
	M(LVAR, ARGu16),
	M(LGET, ARGu16),

	M(IVAR, ARGu16),
	M(IVARi8, ARGu16),
	M(IVARi16, ARGu16),
	M(IGET, ARGu16),
	M(IGETi8, ARGu16),
	M(IGETu8, ARGu16),
	M(IGETi16, ARGu16),
	M(IGETu16, ARGu16),
	M(ISET, ARGu16),
	M(ISETi8, ARGu16),
	M(ISETi16, ARGu16),

	M(ATI, NOARG),
	M(ATI8, NOARG),
	M(ATI16, NOARG),
	M(ATIGET, NOARG),
	M(ATIGETu8, NOARG),
	M(ATIGETu16, NOARG),
	M(ATIGETi8, NOARG),
	M(ATIGETi16, NOARG),
	M(ATISET, NOARG),
	M(ATISET8, NOARG),
	M(ATISET16, NOARG),

	M(PEEK, NOARG),
	M(PEEKi8, NOARG),
	M(PEEKu8, NOARG),
	M(PEEKi16, NOARG),
	M(PEEKu16, NOARG),
	M(POKE, NOARG),
	M(POKEi8, NOARG),
	M(POKEi16, NOARG),

	M(ADD, NOARG),
	M(SUB, NOARG),
	M(MUL, NOARG),
	M(DIVs, NOARG),
	M(DIVu, NOARG),
	M(REMs, NOARG),
	M(REMu, NOARG),
	M(AND, NOARG),
	M(OR, NOARG),
	M(XOR, NOARG),
	M(SL, NOARG),
	M(SR, NOARG),
	M(SRu, NOARG),

	M(ADDI, NOARG),
	//M(SUBI,  NOARG), --> ADDI
	M(MULI, NOARG),
	M(DIVIs, NOARG),
	M(DIVIu, NOARG),
	M(ANDI, NOARG),
	M(ORI, NOARG),
	M(XORI, NOARG),
	M(SLI, NOARG),
	M(SRI, NOARG),
	M(SRIu, NOARG),

	M(INC, NOARG),
	M(INC2, NOARG),
	M(INC4, NOARG),
	M(INC8, NOARG),
	M(DEC, NOARG),
	M(DEC2, NOARG),
	M(DEC4, NOARG),
	M(DEC8, NOARG),

	M(SL1, NOARG),
	M(SL2, NOARG),
	M(SL3, NOARG),
	M(SL4, NOARG),
	M(SR1, NOARG),
	M(SR2, NOARG),
	M(SR3, NOARG),
	M(SR4, NOARG),
	M(SR1u, NOARG),
	M(SR2u, NOARG),
	M(SR3u, NOARG),
	M(SR4u, NOARG),

	M(CPL, NOARG),
	M(NEG, NOARG),
	M(ABS, NOARG),
	M(SIGN, NOARG),

	M(MIN, NOARG),
	M(MINu, NOARG),
	M(MAX, NOARG),
	M(MAXu, NOARG),
	M(RANDOMu, NOARG),
	M(NOW, NOARG),

	M(ADDf, NOARG),
	M(SUBf, NOARG),
	M(MULf, NOARG),
	M(DIVf, NOARG),
	M(SLf, NOARG),
	M(SRf, NOARG),
	M(INCf, NOARG),
	M(DECf, NOARG),
	M(NEGf, NOARG),
	M(ABSf, NOARG),
	M(SIGNf, NOARG),

	M(SIN, NOARG),
	M(COS, NOARG),
	M(TAN, NOARG),
	M(ASIN, NOARG),
	M(ACOS, NOARG),
	M(ATAN, NOARG),
	M(SINH, NOARG),
	M(COSH, NOARG),
	M(TANH, NOARG),
	M(ASINH, NOARG),
	M(ACOSH, NOARG),
	M(ATANH, NOARG),
	M(LOG2, NOARG),
	M(LOGE, NOARG),
	M(LOG10, NOARG),
	M(LOG, NOARG),
	M(EXP2, NOARG),
	M(EXPE, NOARG),
	M(EXP10, NOARG),
	M(EXP, NOARG),
	M(SQRT, NOARG),
	M(FLOOR, NOARG),
	M(CEIL, NOARG),
	M(ROUND, NOARG),
	M(INTEG, NOARG),
	M(FRACT, NOARG),
	M(EXPONENT, NOARG),
	M(MANTISSA, NOARG),
	M(COMPOSE, NOARG),
	M(MINf, NOARG),
	M(MAXf, NOARG),
	M(RANDOMf1, NOARG),
	M(RANDOMf, NOARG),
	M(NOWf, NOARG),

	M(ITOi8, NOARG),
	M(ITOi16, NOARG),
	M(UTOu8, NOARG),
	M(UTOu16, NOARG),
	M(ITOF, NOARG),
	M(FTOI, NOARG),
	M(UTOF, NOARG),
	M(FTOU, NOARG),
	M(ITOB, NOARG),
	M(FTOB, NOARG),

	M(JZ, ARGi16),
	M(JNZ, ARGi16),
	M(JEQ, ARGi16),
	M(JNE, ARGi16),
	M(JLT, ARGi16),
	M(JLE, ARGi16),
	M(JGT, ARGi16),
	M(JGE, ARGi16),
	M(JLTu, ARGi16),
	M(JLEu, ARGi16),
	M(JGTu, ARGi16),
	M(JGEu, ARGi16),

	M(JZf, ARGi16),
	M(JNZf, ARGi16),
	M(JEQf, ARGi16),
	M(JNEf, ARGi16),
	M(JLTf, ARGi16),
	M(JLEf, ARGi16),
	M(JGEf, ARGi16),
	M(JGTf, ARGi16),

	M(JEQI, ARGi16i16), // 2 arguments: N and Â±dis
	M(JNEI, ARGi16i16),
	M(JLTI, ARGi16i16),
	M(JLTIu, ARGi16i16),
	M(JLEI, ARGi16i16),
	M(JLEIu, ARGi16i16),
	M(JGEI, ARGi16i16),
	M(JGEIu, ARGi16i16),
	M(JGTI, ARGi16i16),
	M(JGTIu, ARGi16i16),

	M(JR, ARGi16),
	M(JP, ARGu32),
	M(JSR, ARGu32),
	M(JP_, ARG_u32), // with filler before u32
	M(JSR_, ARG_u32),
	M(RET, NOARG),
	M(SWITCH, NOARG),

	M(DROP, NOARG),
	M(DROP2, NOARG),
	M(DROP3, NOARG),
	M(DROPN, NOARG),

	M(DROP_RET, NOARG),
	M(DROP2_RET, NOARG),
	M(DROP3_RET, NOARG),
	M(DROPN_RET, NOARG),

	M(EXIT, NOARG),


	//


	M(NEW_OBJECT, ARGu16),
	M(NEW_ARRAY, ARGu16),
	M(SETCONST, NOARG),

	M(COUNT, NOARG),
	M(CLONE, NOARG),
	M(CONCAT, NOARG),
	M(CONCATu, NOARG),
	M(CONCATs, NOARG),
	M(LEFTRANGE, NOARG),
	M(MIDRANGE, NOARG),
	M(RIGHTRANGE, NOARG),

	M(CALL_VFUNC, NOARG),

	M(TRY, ARGi16),
	M(THROW, NOARG),
	M(TRYEND, NOARG),
	M(CATCH, NOARG),

	M(ENVIRON, NOARG),
	M(ARGV, NOARG),
	M(WAIT, NOARG),
	M(WAIT_UNTIL, NOARG),
	M(WAIT_DELAY, NOARG),
	M(RUN_GC, NOARG),
};
#undef M
